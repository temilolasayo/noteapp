{"version":3,"sources":["logo.svg","components/TodoDetails.js","components/AddTask.js","components/EditTaskForm.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoDetails","props","class","todos","length","map","todo","key","id","title","details","onClick","editSingleTask","className","deleteTask","text-center","AddTask","todoLists","useState","setTodos","onChangeInput","e","target","name","value","onSubmit","preventDefault","addDetails","for","type","onChange","placeholder","rows","EditTaskForm","currentTask","setTodo","updateTask","setEditing","Home","editTask","SetEditTask","setCurrentTask","updatedTask","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a28da6f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport \"./css/styles.css\";\r\n\r\nconst TodoDetails = (props) => (\r\n  <div class=\"container\">\r\n    <div class=\"table-wrapper\">\r\n      <div class=\"table-title\">\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-12\">\r\n            <h2>\r\n              <b>Todo List</b>\r\n            </h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <table class=\"table table-striped table-hover\">\r\n        <thead class=\"table-title\">\r\n          <tr>\r\n            <th>\r\n              <h2>Title(s)</h2>\r\n            </th>\r\n            <th>\r\n              <h2>Note(s)</h2>\r\n            </th>\r\n            <th>\r\n              <h2>Actions</h2>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.todos.length > 0 ? (\r\n            props.todos.map((todo) => (\r\n              <tr key={todo.id}>\r\n                <td>{todo.title}</td>\r\n                <td>{todo.details}</td>\r\n\r\n                <td>\r\n                  <button\r\n                    onClick={() => props.editSingleTask(todo)}\r\n                    className=\"btn  btn-primary\"\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                  <span> </span>\r\n                  <button\r\n                    onClick={() => props.deleteTask(todo.id)}\r\n                    className=\"btn btn-danger\"\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <p>\r\n              <tr>\r\n                <th>\r\n                  {\" \"}\r\n                  <div class=\"col-sm-12 text-danger\">\r\n                    <h2 text-center>\r\n                      <b>You dont have any todo pending!</b>\r\n                    </h2>\r\n                  </div>\r\n                </th>\r\n              </tr>\r\n            </p>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default TodoDetails;\r\n","import React, { useState } from \"react\";\r\n\r\nconst AddTask = (props) => {\r\n  const todoLists = {\r\n    id: null,\r\n    title: \"\",\r\n    details: \"\",\r\n  };\r\n  const [todos, setTodos] = useState(todoLists);\r\n  const onChangeInput = (e) => {\r\n    const { name, value } = e.target;\r\n    setTodos({\r\n      ...todos,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const addDetails = (todo) => {\r\n    let today = new Date().toISOString().substr(0, 10);\r\n    document.querySelector(\"#today\").value = today;\r\n    todo.id = todos.length + 1;\r\n    todo.date = today;\r\n    console.log(todo.date);\r\n    setTodos([...todos, todo]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          if (!todos.title || !todos.details) return;\r\n          props.addDetails(todos);\r\n          setTodos(todoLists);\r\n        }}\r\n      >\r\n        {/* <div className=\"form-group\">\r\n          <label for=\"title\">Title</label>\r\n          <input\r\n            class=\"form-control\"\r\n            id=\"title\"\r\n            // placeholder=\"name@example.com\"\r\n            type=\"text\"\r\n            name=\"title\"\r\n            value={todos.title}\r\n            onChange={onChangeInput}\r\n          />\r\n        </div> */}\r\n        <div class=\"form-group row\">\r\n          <label for=\"title\" class=\"col-sm-2 col-form-label\">\r\n            Title\r\n          </label>\r\n          <div class=\"col-sm-10\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              value={todos.title}\r\n              onChange={onChangeInput}\r\n              class=\"form-control\"\r\n              id=\"title\"\r\n              placeholder=\"Title\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"title\" class=\"col-sm-2 col-form-label\">\r\n            Note\r\n          </label>\r\n          <div class=\"col-sm-10\">\r\n            <textarea\r\n              class=\"form-control\"\r\n              id=\"exampleFormControlTextarea1\"\r\n              name=\"details\"\r\n              value={todos.details}\r\n              onChange={onChangeInput}\r\n              rows=\"4\"\r\n              placeholder=\"Write your notes here!!!\"\r\n            ></textarea>\r\n          </div>\r\n        </div>\r\n        {/* <div class=\"form-group\">\r\n          <label for=\"exampleFormControlTextarea1\">Note </label>\r\n          <textarea\r\n            class=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            name=\"details\"\r\n            value={todos.details}\r\n            onChange={onChangeInput}\r\n            rows=\"4\"\r\n          ></textarea>\r\n        </div> */}\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Add New Task\r\n        </button>\r\n      </form>\r\n      {/* <form>\r\n        <input id=\"today\" type=\"date\"></input>\r\n        <label>Title</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          value={todos.title}\r\n          onChange={onChangeInput}\r\n        />\r\n        <label>Details</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"details\"\r\n          value={todos.details}\r\n          onChange={onChangeInput}\r\n        />\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Add New Task\r\n        </button>\r\n      </form> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTask;\r\n","import React, { useState } from \"react\";\r\n\r\nconst EditTaskForm = (props) => {\r\n  const [todo, setTodo] = useState(props.currentTask);\r\n\r\n  const onChangeInput = (e) => {\r\n    const { name, value } = e.target;\r\n    setTodo({\r\n      ...todo,\r\n      [name]: value,\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <br />\r\n      <form\r\n        onSubmit={(e) => {\r\n          props.updateTask(todo.id, todo);\r\n        }}\r\n      >\r\n        <div class=\"form-group row\">\r\n          <label for=\"title\" class=\"col-sm-2 col-form-label\">\r\n            Title\r\n          </label>\r\n          <div class=\"col-sm-10\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              value={todo.title}\r\n              onChange={onChangeInput}\r\n              class=\"form-control\"\r\n              id=\"title\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"title\" class=\"col-sm-2 col-form-label\">\r\n            Note\r\n          </label>\r\n          <div class=\"col-sm-10\">\r\n            <textarea\r\n              class=\"form-control\"\r\n              id=\"details\"\r\n              name=\"details\"\r\n              value={todo.details}\r\n              onChange={onChangeInput}\r\n              rows=\"4\"\r\n            ></textarea>\r\n          </div>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-success\">\r\n          Update Task\r\n        </button>\r\n        <span> </span>\r\n        <button\r\n          onClick={() => props.setEditing(false)}\r\n          className=\"btn btn-primary\"\r\n          type=\"submit\"\r\n        >\r\n          Cancel\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditTaskForm;\r\n","import React, { useState } from \"react\";\r\nimport TodoDetails from \"./TodoDetails\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport AddTask from \"./AddTask\";\r\nimport EditTaskForm from \"./EditTaskForm\";\r\n\r\nfunction Home() {\r\n  //   const todoListsData = [];\r\n\r\n  const todoListsData = [\r\n    { id: 1, title: \"Read\", details: \"I will love to read today\" },\r\n    { id: 2, title: \"Dance\", details: \"I will love to dance today\" },\r\n    { id: 3, title: \"Jump\", details: \"I will love to jump today\" },\r\n    { id: 4, title: \"Sing\", details: \"I will love to sing today\" },\r\n    { id: 5, title: \"Stand\", details: \"I will love to stand today\" },\r\n    { id: 6, title: \"Code\", details: \"I will love to code today\" },\r\n    { id: 7, title: \"Sleep\", details: \"I will love to sleep today\" },\r\n  ];\r\n\r\n  const [todos, setTodos] = useState(todoListsData);\r\n\r\n  const [editTask, SetEditTask] = useState(false);\r\n  const intialTaskState = { id: null, title: \"\", details: \"\" };\r\n  const [currentTask, setCurrentTask] = useState(intialTaskState);\r\n\r\n  const addDetails = (todo) => {\r\n    todo.id = todos.length + 1;\r\n    setTodos([...todos, todo]);\r\n  };\r\n\r\n  const deleteTask = (id) => {\r\n    setTodos(todos.filter((todo) => todo.id !== id));\r\n  };\r\n  const editSingleTask = (todos) => {\r\n    SetEditTask(true);\r\n    setCurrentTask({\r\n      id: todos.id,\r\n      title: todos.title,\r\n      details: todos.details,\r\n    });\r\n  };\r\n\r\n  const updateTask = (id, updatedTask) => {\r\n    SetEditTask(false);\r\n    setTodos(todos.map((todo) => (todo.id === id ? updatedTask : todo)));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>My Note App</h1>\r\n      <div className=\"flex-row\">\r\n        <div className=\"flex-large\">\r\n          {editTask ? (\r\n            <div>\r\n              {/* <h2>Edit Task</h2> */}\r\n              <EditTaskForm\r\n                SetEditTask={SetEditTask}\r\n                currentTask={currentTask}\r\n                updateTask={updateTask}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              {/* <h2>Add Task</h2> */}\r\n              <AddTask addDetails={addDetails} />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"flex-large\">\r\n          {/* <h2>View Todo(s)</h2> */}\r\n          <TodoDetails\r\n            todos={todos}\r\n            deleteTask={deleteTask}\r\n            editSingleTask={editSingleTask}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Home from \"./components/Home\";\r\n\r\n// import \"./components/css/styles.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}